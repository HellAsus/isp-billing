extend type Query {
    customer(id: ID @eq): Customer @find
    customers: [Customer!]! @paginate(defaultCount: 10)
    #me: User @auth
    #users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find

}

extend type Mutation {
    createCustomer(input: CreateCustomerInput! @spread): Customer @create
    updateCustomer(input: UpdateCustomerInput! @spread): Customer @update
    deleteCustomer(id: ID!): Customer @delete
}

input CreateCustomerInput {
    username: String! @rules(apply: ["unique:customers,username"])
    full_name: String!
    password: String!
}

input UpdateCustomerInput {
    id: ID!
    username: String @rules(apply: ["unique:customers,username"])
    full_name: String
    password: String
    tariff_id: ID
}

type User {
    id: ID!
}

type Customer {
    id: ID!
    username: String!
    full_name: String!
    ip: String!
    tariff_id: ID!
    password: String!
    email: String!
    deposit: Float!
    state: Boolean!
    activation_date: Date!
    expiration_date: Date!
    phones: [Phone] @hasmany
    tariff: Tariff @hasOne
    invoices: [Invoice] @hasmany
    session: Session @hasOne
    statistics: [Statistics] @hasmany
}
